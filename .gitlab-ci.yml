variables:
  APP_VERSION: "0.0.13"
  APPS_PROJECT_BRANCH_NAME: "${CI_COMMIT_REF_NAME}"
  BUILD_NUMBER: "${CI_COMMIT_REF_NAME}-${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
  IMAGE_TAG: "${APP_VERSION}-${CI_COMMIT_REF_NAME}"
  IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
  IMAGE_LATEST_TAG: "${CI_COMMIT_REF_NAME}-latest"
  LATEST_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}-latest"
  UV_VERSION: "0.8.0"
  PYTHON_VERSION: "3.13"
  BASE_LAYER: bookworm-slim
  UV_LINK_MODE: copy
  CONFIG_DIR: "config-files"
workflow:
  rules:
  - if: $CI_COMMIT_BRANCH == "test" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "development" || $CI_COMMIT_BRANCH == "staging"
stages:
- lint
- build
- push
- deploy-ws-worker
- deploy-ws

lint:
  stage: lint
  image: ghcr.io/astral-sh/uv:$UV_VERSION-python$PYTHON_VERSION-$BASE_LAYER
  services:
  - docker:dind
  tags:
  - dind
  script:
  - ls -al
  - echo "GITLAB_USER $GITLAB_USER"
  - echo "CI_BUILDS_DIR $CI_BUILDS_DIR"
  - echo "CONFIG_DIR $CONFIG_DIR"
  - echo "K8S_CONFIG_FILE_PATH $K8S_CONFIG_FILE_PATH"
  - echo "DEPLOYMENTS_FOLDER $DEPLOYMENTS_FOLDER"
  - echo "CI_REGISTRY_USER $CI_REGISTRY_USER"
  - echo "CI_REGISTRY $CI_REGISTRY"
  - echo "BRANCH $CI_COMMIT_REF_NAME"
  - echo "CI_PIPELINE_ID $CI_PIPELINE_ID"
  - echo "CI_COMMIT_SHORT_SHA $CI_COMMIT_SHORT_SHA"
  - echo "CI_REGISTRY_IMAGE CI_REGISTRY_IMAGE"
  - echo "APP_VERSION $APP_VERSION"
  - echo "BUILD_NUMBER $BUILD_NUMBER"
  - echo "IMAGE_TAG $IMAGE_TAG"
  - echo "IMAGE NAME $IMAGE_NAME"
  - echo "IMAGE NAME (with latest tag) $LATEST_IMAGE_NAME"
  - echo "CICD_PROJECT_URL $CICD_PROJECT_URL"
  - echo "APPS_PROJECT_BRANCH_NAME $APPS_PROJECT_BRANCH_NAME"
  - echo "MTBLS_NFS_USER_GROUP1_ID $MTBLS_NFS_USER_GROUP1_ID"
  - echo "MTBLS_NFS_USER_GROUP2_ID $MTBLS_NFS_USER_GROUP2_ID"
  - echo "MTBLS_NFS_USER_ID $MTBLS_NFS_USER_ID"
  - uv sync --locked --group test --group dev
  - uv run ruff check
  - uv run ruff format --check
  - uv run lint-imports

build_image:
  stage: build
  image: docker:latest
  services:
  - docker:dind
  tags:
  - dind
  script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  - echo "Build number $BUILD_NUMBER, commit name ${CI_COMMIT_REF_NAME}"
  - echo "${BUILD_NUMBER}" > build_number
  - echo  "$APP_VERSION" | xargs > app_version
  - echo "docker build -f Dockerfile.ws -t $IMAGE_NAME ."
  - docker build -f Dockerfile.ws -t $IMAGE_NAME .
  - echo "docker build -f Dockerfile.ws -t $LATEST_IMAGE_NAME ."
  - docker build -f Dockerfile.ws -t $LATEST_IMAGE_NAME .

push_image:
  stage: push
  image: docker:latest
  services:
  - docker:dind
  tags:
  - dind
  script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  - docker push $IMAGE_NAME
  - docker push $LATEST_IMAGE_NAME

deploy_ws_worker:
  stage: deploy-ws-worker
  variables:
    CHART_NAME: mhd-ws-worker
  extends: .kube_deploy_script

deploy_ws:
  stage: deploy-ws
  variables:
    CHART_NAME: mhd-ws
  extends: .kube_deploy_script

.kube_deploy_script:
  image: alpine/k8s:1.23.17
  services:
  - docker:dind
  tags:
  - dind
  rules:
  - if: $CI_COMMIT_BRANCH == "test" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "development"
    when: on_success
  - if: $CI_COMMIT_BRANCH == "main"
    when: on_success
    allow_failure: false
  script:
  - echo "CONFIG_DIR $CONFIG_DIR"
  - apk add --no-cache git
  - echo "CICD_PROJECT_URL $CICD_PROJECT_URL"
  - rm -rf $CONFIG_DIR
  - echo git clone https://$GITLAB_USER:$GITLAB_USER_TOKEN@${CICD_PROJECT_URL} $CONFIG_DIR
  - git clone https://$GITLAB_USER:$GITLAB_USER_TOKEN@${CICD_PROJECT_URL} $CONFIG_DIR
  - export K8S_CONFIG_FILE=$(realpath $CONFIG_DIR/$K8S_CONFIG_FILE_PATH)
  - echo "K8S_CONFIG_FILE $K8S_CONFIG_FILE"
  - CICD_PROJECT_ROOT_PATH="$(realpath $CONFIG_DIR)"
  - DEPLOYMENTS_FOLDER_SCRIPTS="$CICD_PROJECT_ROOT_PATH/$DEPLOYMENTS_FOLDER/scripts"
  - echo "DEPLOYMENTS_FOLDER_SCRIPTS $DEPLOYMENTS_FOLDER_SCRIPTS"
  - cd $CICD_PROJECT_ROOT_PATH
  - ls -al
  - git checkout $APPS_PROJECT_BRANCH_NAME
  - git status
  - git pull
  - cd $DEPLOYMENTS_FOLDER_SCRIPTS
  - echo "initial_setup.sh will run"
  - cat initial_setup.sh
  - bash initial_setup.sh
  - DEPLOYMENTS_CHART_PATH="$CICD_PROJECT_ROOT_PATH/$DEPLOYMENTS_FOLDER/charts/$CHART_NAME"
  - echo "DEPLOYMENTS_CHART_PATH $DEPLOYMENTS_CHART_PATH"
  - cd $DEPLOYMENTS_CHART_PATH
  - cat template.sh
  - echo template.sh "image.repository=$CI_REGISTRY_IMAGE,image.tag=$IMAGE_TAG"
  - bash template.sh "image.repository=$CI_REGISTRY_IMAGE,image.tag=$IMAGE_TAG"
  - cat install.sh
  - echo install.sh "image.repository=$CI_REGISTRY_IMAGE,image.tag=$IMAGE_TAG"
  - bash install.sh "image.repository=$CI_REGISTRY_IMAGE,image.tag=$IMAGE_TAG"
